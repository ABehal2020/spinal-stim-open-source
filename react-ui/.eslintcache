[{"/app/src/js/baseManager.js":"1","/app/src/js/scenes/pages/examples/examples.js":"2","/app/src/js/reducers/navReducer.js":"3","/app/src/js/components/form/form.js":"4","/app/src/js/components/muscleTable/MuscleTable.js":"5","/app/src/js/reducers/baseReducer.js":"6","/app/src/js/components/clock/clock.js":"7"},{"size":2460,"mtime":1609870662946,"results":"8","hashOfConfig":"9"},{"size":14507,"mtime":1610093547880,"results":"10","hashOfConfig":"9"},{"size":985,"mtime":1609806524579,"results":"11","hashOfConfig":"9"},{"size":20786,"mtime":1610089232506,"results":"12","hashOfConfig":"9"},{"size":3355,"mtime":1610007996800,"results":"13","hashOfConfig":"9"},{"size":798,"mtime":1609806497869,"results":"14","hashOfConfig":"9"},{"size":616,"mtime":1609788064078,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"1gwzq69",{"filePath":"20","messages":"21","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"24","usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"19"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/app/src/js/baseManager.js",["35","36","37","38"],"import React, { useContext, useEffect, useCallback, lazy, Suspense } from 'react';\nimport FormContainer from './containers/formContainer';\nimport BaseContainer from './containers/baseContainer';\nimport Banner from './scenes/banner/banner';\nimport { Layout, Menu, } from 'antd';\nimport { Store } from './store/Store';\nimport { usePrevious } from './utils/usePrevious';\nimport LoadingPage from './scenes/loadingPage/loadingPage';\nimport './baseManager.scss';\n\nconst LazyInformationPage = lazy(() => import('./scenes/pages/information/information'));\nconst LazyExamplesPage = lazy(() => import('./scenes/pages/examples/examples'));\nconst LazyGeneratePage = lazy(() => import('./scenes/pages/generate/generate'));\n\nconst BaseManager = () => {\n  const {\n    state: {\n\n      cherryUser,\n      departments,\n      navigation: { page, env }\n    },\n    dispatch\n  } = useContext(Store);\n\n  const prev = usePrevious({ env });\n\n  const updatefilteredDepartments = useCallback(() => {\n    console.log('updatefilters called ');\n  }, [prev, env, dispatch]);\n\n  const januCB = useCallback(() => {\n    console.log(\"call back\");\n    console.log(cherryUser);\n    console.log(departments);\n    console.log(dispatch);\n\n  }, [cherryUser, dispatch, departments, env]);\n\n  useEffect(() => {\n    console.log(\"step 1\");\n    januCB();\n  }, [januCB]);\n\n\n  useEffect(() => {\n    console.log(\"step 2\");\n    updatefilteredDepartments();\n  }, [updatefilteredDepartments]);\n\n  const getLazyMenu = (menuName) => {\n    switch (menuName) {\n      case \"Information\":\n        return (<LazyInformationPage></LazyInformationPage>);\n      case \"Examples\":\n        return (<LazyExamplesPage></LazyExamplesPage>);\n      case \"Generate\":\n        return (<LazyGeneratePage></LazyGeneratePage>);\n      default:\n        return (<LazyGeneratePage></LazyGeneratePage>);\n    }\n  }\n\n  return (\n    <Layout>\n      <Banner></Banner>\n      <BaseContainer>\n        <Suspense fallback={<LoadingPage></LoadingPage>}>\n          {getLazyMenu(page)}\n        </Suspense>\n      </BaseContainer>\n      {/*\n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']} className=\"menuStyle\">\n        <Menu.Item key=\"1\" className=\"option1\">Application Information</Menu.Item>\n        <Menu.Item key=\"2\" className=\"option2\">Search Past Jobs and Examples</Menu.Item>\n        <Menu.Item key=\"3\" className=\"option3\">New Job Submissions</Menu.Item>\n      </Menu>\n      */}\n    </Layout>\n  )\n}\n\nexport default BaseManager;",["39","40"],"/app/src/js/scenes/pages/examples/examples.js",["41","42","43","44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62"],"/app/src/js/reducers/navReducer.js",["63"],"export const NavReducer = (state, action) => {\n    console.log('chipNavigationReducer');\n    console.log(action);\n    console.log(state);\n    console.log('chipNavigationReducer..');\n\n    switch (action.type) {\n        case \"SET_NAVIGATION_PAGE\":\n            console.log(\"state\");\n            let ob = {\n                ...state,\n                navigation: { ...state.navigation, page: action.payload }\n            };\n            console.log(\"state changed\");\n            console.log(ob);\n            return ob;\n        case \"EVENT_SHUTTER_FLY_OPEN\":\n            console.log(state);\n            let ob2 = {\n                ...state,\n                navigation: {\n                    ...state.navigation,\n                     shutterflyOpen: !state.navigation. shutterflyOpen\n                }\n            };\n            console.log(\"after state change - EVENT_SHUTTER_FLY_OPEN\");\n            console.log(ob2);\n            return ob2;\n        default:\n            return state;\n    }\n};","/app/src/js/components/form/form.js",["64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80"],"import React, { useReducer, useState, useEffect, useCallback } from 'react';\nimport formReducer from '../../reducers/formReducer';\nimport { Col, Form, Slider, Input, InputNumber, Button, Checkbox, Radio, Table} from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\nimport axios from 'axios';\nimport contactsPlacement from '../../images/contacts-placement.png';\nimport contactsDiagram from '../../images/contacts-diagram.png';\nimport muscleAbbreviations from '../../images/muscle-abbreviations.png';\nimport labelledBody from '../../images/labelled-body.png';\nimport leftBody from '../../images/left_body_labeled_2.svg';\nimport rightBody from '../../images/right_body_labeled_2.svg';\nimport wholeBody from '../../images/full_body_labeled_2.svg';\nimport MuscleTable from '../../components/muscleTable/MuscleTable';\nimport 'antd/dist/antd.css';\nimport './form.scss';\n\nconst layout = {\n    labelCol: {\n      span: 8,\n    },\n    wrapperCol: {\n      span: 16,\n    },\n};\n\nconst tailLayout = {\n    wrapperCol: {\n        offset: 8,\n        span: 16,\n    },\n};\n\n/*\nconst buttonStyle = {\n    marginRight: '15px'\n}\n*/\n\nconst radioStyle = {\n    display: 'block',\n    height: '30px',\n    lineHeight: '30px',\n};\n\nconst marks = {\n    0: '0',\n    1: '1.0',\n    2: '2.0',\n    3: '3.0',\n    4: '4.0',\n    5: '5.0',\n    6: '6.0',\n    7: '7.0',\n    8: '8.0',\n    9: '9.0',\n    10: '10.0',\n};\n\nconst columns = [\n    {\n        title: 'Muscle Groups',\n        dataIndex: 'groups',\n        key: 'groups',\n    },\n    {\n        title: 'Abbreviations',\n        dataIndex: 'abbreviations',\n        key: 'abbreviations',\n    },\n];\n\nconst data = [\n    {\n        key: '1',\n        groups: 'Left Adductor Hallucis',\n        abbreviations: 'LAH',\n    },\n    {\n        key: '2',\n        groups: 'Left Adductor Magnus',\n        abbreviations: 'LADD',\n    },\n    {\n        key: '3',\n        groups: 'Left Quadriceps',\n        abbreviations: 'LQUAD',\n    },\n    {\n        key: '4',\n        groups: 'Left Gluteus Maximus',\n        abbreviations: 'LGLUT',\n    },\n    {\n        key: '5',\n        groups: 'Left Biceps Femoris',\n        abbreviations: 'LBF',\n    },\n    {\n        key: '6',\n        groups: 'Left Tibialis Anterior',\n        abbreviations: 'LTA',\n    },\n    {\n        key: '7',\n        groups: 'Left Medial Gastrocnemius',\n        abbreviations: 'LMG',\n    },\n    {\n        key: '8',\n        groups: 'Left Upper Abdomen',\n        abbreviations: 'LUAB',\n    },\n    {\n        key: '9',\n        groups: 'Left Lower Abdomen',\n        abbreviations: 'LLAB',\n    },\n    {\n        key: '10',\n        groups: 'Right Adductor Hallucis',\n        abbreviations: 'RAH',\n    },\n    {\n        key: '11',\n        groups: 'Right Adductor Magnus',\n        abbreviations: 'RADD',\n    },\n    {\n        key: '12',\n        groups: 'Right Quadriceps',\n        abbreviations: 'RQUAD',\n    },\n    {\n        key: '13',\n        groups: 'Right Gluteus Maximus',\n        abbreviations: 'RGLUT',\n    },\n    {\n        key: '14',\n        groups: 'Right Biceps Femoris',\n        abbreviations: 'RBF',\n    },\n    {\n        key: '15',\n        groups: 'Right Tibialis Anterior',\n        abbreviations: 'RTA',\n    },\n    {\n        key: '16',\n        groups: 'Right Medial Gastrocnemius',\n        abbreviations: 'RMG',\n    },\n    {\n        key: '17',\n        groups: 'Right Upper Abdomen',\n        abbreviations: 'RUAB',\n    },\n    {\n        key: '18',\n        groups: 'Right Lower Abdomen',\n        abbreviations: 'RLAB',\n    },\n];\n\nconst jobID = uuidv4();\n\nconst FormInterface = (props) => {\n    let initialState = {\n        loading: false,\n        error: false,\n        server_message: \"\",\n        submission_data: {\n            \"jobID\": \"\",\n            \"contactNum\": \"\",\n            \"currentVal\": \"\",\n            \"bodySide\": \"\",\n            \"contactSymmetry\": \"\",\n            \"signalingProcMethod\": \"\",\n            // \"normalization\": \"\",\n            \"normalizationMethod\": \"\",\n            \"colormapOption\": \"\",\n            \"imageData\": \"\",\n        }\n    }\n\n    const [{loading, error, server_message, submission_data}, dispatch] = useReducer(formReducer, initialState);\n\n    const [form] = Form.useForm();\n\n    const onReset = () => {\n        form.resetFields();\n    };\n\n    const [contactNum, setContactNum] = useState(\"\");\n    const [currentVal, setCurrentVal] = useState(\"\");\n    const [bodySide, setBodySide] = useState(\"\");\n    const [contactSymmetry, setContactSymmetry] = useState(\"\");\n    const [signalingProcMethod, setSignalingProcMethod] = useState(\"\");\n    // const [normalization, setNormalization] = useState(\"\");\n    const [normalizationMethod, setNormalizationMethod] = useState(\"\");\n    const [colormapOption, setColormapOption] = useState(\"\");\n    // const [disableNormalizationMethod, setDisableNormalizationMethod] = useState(true);\n    const [toggleInformationButtonText, setToggleInformationButtonText] = useState(\"Click for More Information\");\n    const [imgContacts, setImgContacts] = useState(\"imgContacts-hide\");\n    const [dynamicLoading, setDynamicLoading] = useState(false);\n    const [dynamicDisable, setDynamicDisable] = useState(false);\n    const [dynamicNewDisable, setNewDynamicDisable] = useState(false);\n    const [dynamicBodyImage, setDynamicBodyImage] = useState(labelledBody);\n\n    const handleChangeContactNumber = (event) => {\n        setContactNum(event.target.value);\n        console.log(contactNum);\n    }\n\n    const handleChangeCurrentValue = (event) => {\n        let current = parseFloat(event);\n        console.log(current);\n        setCurrentVal(current);\n    }\n\n    const handleChangeBodySide = (event) => {\n        /* if using check box:\n        setBodySide(event); \n        */\n        setBodySide(event.target.value);\n        if (event.target.value == \"left\") {\n            setDynamicBodyImage(leftBody);\n        } else if (event.target.value == \"right\") {\n            setDynamicBodyImage(rightBody);\n        } else {\n            setDynamicBodyImage(wholeBody);\n        }\n    }\n\n    const handleChangeContactSymmetry = (event) => {\n        setContactSymmetry(event.target.value);\n    }\n\n    const handleChangeSignalProcessingMethod = (event) => {\n        setSignalingProcMethod(event.target.value);\n    }\n\n    /*\n    const handleChangeNormalization = (event) => {\n        setNormalization(event.target.value);\n        console.log(event.target.value);\n        if (event.target.value === \"yes\") {\n            setDisableNormalizationMethod(false);\n        } else {\n            setDisableNormalizationMethod(true);\n        }\n    }\n    */\n\n    const handleChangeNormalizationMethod = (event) => {\n        setNormalizationMethod(event.target.value);\n    }\n\n    const handleChangeColormapOption = (event) => {\n        setColormapOption(event.target.value);\n    }\n\n    const toggleInformation = () => {\n        if (toggleInformationButtonText === \"Click for More Information\") {\n            setToggleInformationButtonText(\"Click to Collapse Information\");\n            setImgContacts(\"imgContacts-show\");\n        } else {\n            setToggleInformationButtonText(\"Click for More Information\");\n            setImgContacts(\"imgContacts-hide\");\n        }\n    }\n\n    const callFetchImageData = (response) => {\n        console.log(\"callFetchImageData called here\");\n        props.fetchImageData(response);\n    }\n\n    const submitData = () => {\n        setDynamicLoading(true);\n        setDynamicDisable(true);\n        setNewDynamicDisable(true);\n        let url = \"http://127.0.0.1:8000/processlink/postdata\";\n        let ob = { \"content-type\": \"application/json\" };\n        let data = {\n            \"jobID\": jobID,\n            \"contactNum\": contactNum,\n            \"currentVal\": currentVal,\n            \"bodySide\": bodySide,\n            \"contactSymmetry\": contactSymmetry,\n            \"signalingProcMethod\": signalingProcMethod,\n            \"normalizationMethod\": normalizationMethod,\n            \"colormapOption\": colormapOption,\n            \"imageData\": \"\",\n        }\n        console.log(data);\n        axios.post(url, data, { headers: ob })\n        .then((response) => {\n            console.log(\"response\");\n            callFetchImageData(response);\n            setDynamicLoading(false);\n            setNewDynamicDisable(false);\n        })\n        .catch((error) => {\n            console.log(\"error\");\n        });\n    }\n\n    const inputSave = () => {\n        console.log(jobID);\n        console.log(contactNum);\n        console.log(currentVal);\n        console.log(bodySide);\n        console.log(contactSymmetry);\n        console.log(signalingProcMethod);\n        // console.log(normalization);\n        console.log(normalizationMethod);\n        console.log(colormapOption);\n        props.fetchFileName(jobID);\n        submitData();\n    }\n\n    const refreshPage = () => {\n        window.location.reload();\n    }\n\n    return (\n        <div>\n            <Col span={4} className=\"col-md-2\"></Col>\n            <Col span={20} className=\"col-md-10\">\n                <Form {...layout} form={form} onFinish={inputSave}>\n                    <Form.Item label=\"Select contact number\" name=\"contactNumber\" rules={[\n                        {\n                            required: true,\n                            message: 'Please select the contact number.',\n                        },\n                    ]}>\n                        {/*\n                        <InputNumber min={1} max={8} value={Number.value} onChange={handleChangeContactNumber}></InputNumber>\n                        */}\n                        <Radio.Group onChange={handleChangeContactNumber} disabled={dynamicDisable}>\n                            <Radio value=\"1\">1</Radio>\n                            <Radio value=\"2\">2</Radio>\n                            <Radio value=\"3\">3</Radio>\n                            <Radio value=\"4\">4</Radio>\n                            <Radio value=\"5\">5</Radio>\n                            <Radio value=\"6\">6</Radio>\n                            <Radio value=\"7\">7</Radio>\n                            <Radio value=\"8\">8</Radio>\n                        </Radio.Group>\n                        {/*\n                        <div className=\"c-container\">\n                            <div className=\"c-box\">\n                                <span className=\"c-span\">1</span>\n                            </div>\n                            <div className=\"c-box\">\n                                <span className=\"c-span\">2</span>\n                            </div>\n                            <div className=\"c-box\">\n                                <span className=\"c-span\">3</span>\n                            </div>\n                            <div className=\"c-box\">\n                                <span className=\"c-span\">4</span>\n                            </div>\n                            <div className=\"c-box\">\n                                <span className=\"c-span\">5</span>\n                            </div>\n                            <div className=\"c-box\">\n                                <span className=\"c-span\">6</span>\n                            </div>\n                            <div className=\"c-box\">\n                                <span className=\"c-span\">7</span>\n                            </div>\n                            <div className=\"c-box\">\n                                <span className=\"c-span\">8</span>\n                            </div>\n                        </div>\n                        */}\n                        {/*\n                        <Button value=\"2\" style={buttonStyle} onClick={handleChangeContactNumber}>2</Button>\n                        <Button value=\"3\" style={buttonStyle} onClick={handleChangeContactNumber}>3</Button>\n                        <Button value=\"4\" style={buttonStyle} onClick={handleChangeContactNumber}>4</Button>\n                        <Button value=\"5\" style={buttonStyle} onClick={handleChangeContactNumber}>5</Button>\n                        <Button value=\"6\" style={buttonStyle} onClick={handleChangeContactNumber}>6</Button>\n                        <Button value=\"7\" style={buttonStyle} onClick={handleChangeContactNumber}>7</Button>\n                        <Button value=\"8\" style={buttonStyle} onClick={handleChangeContactNumber}>8</Button>\n                        */}\n                    </Form.Item>\n                    <Form.Item label=\"Select body side\" name=\"bodySide\" rules={[\n                        {\n                            required: true,\n                            message: 'Please select the body side.',\n                        },\n                    ]}>\n                        {/*\n                        <Checkbox.Group onChange={handleChangeBodySide} >\n                            <Checkbox value=\"left\">Left Side</Checkbox>\n                            <Checkbox value=\"right\">Right Side</Checkbox>\n                        </Checkbox.Group>\n                        */}\n                        <Radio.Group onChange={handleChangeBodySide} disabled={dynamicDisable}>\n                            <Radio value=\"left\">Left Body</Radio>\n                            <Radio value=\"right\">Right Body</Radio>\n                            <Radio value=\"full\">Full Body</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n                    <Button onClick={toggleInformation} className=\"toggleButton\">\n                            {toggleInformationButtonText}\n                    </Button>\n                    <div className={imgContacts}>\n                        <img src={contactsPlacement} alt=\"Placement of Contacts (P1-P8)\" width=\"300\" className=\"placement\"></img>\n                        <img src={contactsDiagram} alt=\"Diagram of Contacts (P1-P8)\" className=\"diagram\"></img> \n                        <img src={dynamicBodyImage} alt=\"Body Labelled with Muscles\" className=\"bodyMuscles\" height=\"575\"></img>\n                        {/* <Table columns={columns} dataSource={data} className=\"muscles\"></Table> */}\n                        <MuscleTable></MuscleTable>\n                    </div>\n                    <Form.Item label=\"Select stimulation current (mA)\" name=\"currentValue\" rules={[\n                        {\n                            required: true,\n                            message: 'Please select the stimulation current value (mA).',\n                        },\n                    ]}>\n                        <Slider \n                            min={0} \n                            max={10} \n                            step=\"0.1\"\n                            tooltipVisible=\"true\"\n                            style={{\"margin-top\": \"50px\"}}\n                            onChange={handleChangeCurrentValue}\n                            marks={marks}\n                            disabled={dynamicDisable}\n                        />\n                    </Form.Item>\n                    {/*\n                    <Form.Item label=\"Do you want to compare symmetrical contacts?\" name=\"symmetry\" rules={[\n                        {\n                            required: true,\n                            message: 'Please indicate whether you want to compare symmetric contacts or not.',\n                        },\n                    ]}>\n                        <Radio.Group onChange={handleChangeContactSymmetry} disabled={dynamicDisable}>\n                            <Radio value=\"yes\">Yes</Radio>\n                            <Radio value=\"no\">No</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n                    */}\n                    <Form.Item label=\"Select EMG feature\" name=\"signalProcessingMethod\" rules={[\n                        {\n                            required: true,\n                            message: 'Please select the EMG feature.',\n                        },\n                    ]}>\n                        <Radio.Group onChange={handleChangeSignalProcessingMethod} disabled={dynamicDisable}>\n                            <Radio value=\"peak\">Peak to Peak</Radio>\n                            <Radio value=\"rms\">Root Mean Square</Radio>\n                            <Radio value=\"max\">Maximum Peak Value</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n                    {/*\n                    <Form.Item label=\"Do you want to normalize your data?\" name=\"normalization\" rules={[\n                        {\n                            required: true,\n                            message: 'Please indicate whether you want to normalize the data or not.',\n                        },\n                    ]}>\n                        <Radio.Group onChange={handleChangeNormalization}>\n                            <Radio value=\"yes\">Yes</Radio>\n                            <Radio value=\"no\">No</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n                    <Form.Item label=\"Which normalization method do you want to use?\" name=\"normalizationMethod\" rules={[\n                        {\n                            required: !disableNormalizationMethod,\n                            message: 'Please indicate which normalization method you want to use.',\n                        },\n                    ]}>\n                        <Radio.Group onChange={handleChangeNormalizationMethod} disabled={disableNormalizationMethod}>\n                            <Radio value=\"standard\" style={radioStyle}>Standard (0 to 1)</Radio>\n                            <Radio value=\"baseline\" style={radioStyle}>Baseline (using 0 mA as baseline)</Radio>\n                            <Radio value=\"group\" style={radioStyle}>Group normalization (when analyzing mulitple cases at once)</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n                    */}\n                    <Form.Item label=\"Select normalization method\" name=\"normalizationMethod\" rules={[\n                        {\n                            required: true,\n                            message: 'Please select the normalization method.',\n                        },\n                    ]}>\n                        <Radio.Group onChange={handleChangeNormalizationMethod} disabled={dynamicDisable}>\n                            <Radio value=\"no\" style={radioStyle}>No normalization</Radio>\n                            <Radio value=\"dB\" style={radioStyle}>Baseline (dB) normalization</Radio>\n                            <Radio value=\"percentage\" style={radioStyle}>Baseline (%) normalization</Radio>\n                            <Radio value=\"min\" style={radioStyle}>Min-max normalization</Radio>\n                            <Radio value=\"group\" style={radioStyle}>Group normalization</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n                    <Form.Item label=\"Select colormap option\" name=\"colormap\" rules={[\n                        {\n                            required: true,\n                            message: 'Please select the colormap option.',\n                        },\n                    ]}>\n                        <Radio.Group onChange={handleChangeColormapOption} disabled={dynamicDisable}>\n                            {/* <Radio value=\"turbo\" style={radioStyle}>Turbo</Radio> */}\n                            <Radio value=\"jet\" style={radioStyle}>Jet</Radio>\n                            <Radio value=\"hot\" style={radioStyle}>Hot</Radio>\n                            {/* <Radio value=\"bluewhitered\" style={radioStyle}>Bluewhitered</Radio> */}\n                            <Radio value=\"gray\" style={radioStyle}>Gray</Radio>\n                            <Radio value=\"parula\" style={radioStyle}>Parula</Radio>\n                        </Radio.Group>\n                    </Form.Item>\n                    <Form.Item {...tailLayout}>\n                        <Button type=\"primary\" htmlType=\"submit\" style={{\"margin-right\": \"30px\"}} loading={dynamicLoading} className=\"buttons\">\n                            Run\n                        </Button>\n                        <Button htmlType=\"button\" onClick={onReset} style={{\"margin-right\": \"30px\"}} disabled={dynamicDisable} className=\"buttons\">\n                            Reset (keep same job ID)\n                        </Button>\n                        <Button htmlType=\"button\" onClick={refreshPage} disabled={dynamicNewDisable} className=\"buttons\">\n                            New Job Submission (get new job ID)\n                        </Button>\n                        <p className=\"jobStyle\">Please save your unique job ID for future reference: <b>{jobID}</b></p>\n                    </Form.Item>\n                    {/* <img src={heatmap}></img> */}\n                    {/*\n                    <img src={muscleAbbreviations} alt=\"Table of Muscle Abbreviations\"></img>\n                    */}\n                </Form>\n            </Col>\n        </div >\n    )\n}\n\nexport default FormInterface;","/app/src/js/components/muscleTable/MuscleTable.js",["81","82","83","84","85","86","87","88"],"import React from 'react';\nimport { Col, Form, Slider, Input, InputNumber, Button, Checkbox, Radio, Table} from 'antd';\n\nconst columns = [\n    {\n        title: 'Left and Right Muscle Groups',\n        dataIndex: 'groups',\n        key: 'groups',\n    },\n];\n\nconst data = [\n    {\n        key: '1',\n        groups: 'Upper Abdomen',\n    },\n    {\n        key: '2',\n        groups: 'Lower Abdomen',\n    },\n    {\n        key: '3',\n        groups: 'Adductor Magnus',\n    },\n    {\n        key: '4',\n        groups: 'Quadriceps',\n    },\n    {\n        key: '5',\n        groups: 'Tibialis Anterior',\n    },\n    {\n        key: '6',\n        groups: 'Adductor Hallucis',\n    },\n    {\n        key: '7',\n        groups: 'Gluteus Maximus',\n    },\n    {\n        key: '8',\n        groups: 'Biceps Femoris',\n    },\n    {\n        key: '9',\n        groups: 'Medial Gastrocnemius',\n    },\n];\n\nconst MuscleTable = () => {\n    return (\n        <div>\n            <Table columns={columns} dataSource={data} className=\"muscles\"></Table> \n        </div>\n    )\n}\n\nexport default MuscleTable;\n\n/*\nconst columns = [\n    {\n        title: 'Muscle Groups',\n        dataIndex: 'groups',\n        key: 'groups',\n    },\n    {\n        title: 'Abbreviations',\n        dataIndex: 'abbreviations',\n        key: 'abbreviations',\n    },\n];\n\nconst data = [\n    {\n        key: '1',\n        groups: 'Left Adductor Hallucis',\n        abbreviations: 'LAH',\n    },\n    {\n        key: '2',\n        groups: 'Left Adductor Magnus',\n        abbreviations: 'LADD',\n    },\n    {\n        key: '3',\n        groups: 'Left Quadriceps',\n        abbreviations: 'LQUAD',\n    },\n    {\n        key: '4',\n        groups: 'Left Gluteus Maximus',\n        abbreviations: 'LGLUT',\n    },\n    {\n        key: '5',\n        groups: 'Left Biceps Femoris',\n        abbreviations: 'LBF',\n    },\n    {\n        key: '6',\n        groups: 'Left Tibialis Anterior',\n        abbreviations: 'LTA',\n    },\n    {\n        key: '7',\n        groups: 'Left Medial Gastrocnemius',\n        abbreviations: 'LMG',\n    },\n    {\n        key: '8',\n        groups: 'Left Upper Abdomen',\n        abbreviations: 'LUAB',\n    },\n    {\n        key: '9',\n        groups: 'Left Lower Abdomen',\n        abbreviations: 'LLAB',\n    },\n    {\n        key: '10',\n        groups: 'Right Adductor Hallucis',\n        abbreviations: 'RAH',\n    },\n    {\n        key: '11',\n        groups: 'Right Adductor Magnus',\n        abbreviations: 'RADD',\n    },\n    {\n        key: '12',\n        groups: 'Right Quadriceps',\n        abbreviations: 'RQUAD',\n    },\n    {\n        key: '13',\n        groups: 'Right Gluteus Maximus',\n        abbreviations: 'RGLUT',\n    },\n    {\n        key: '14',\n        groups: 'Right Biceps Femoris',\n        abbreviations: 'RBF',\n    },\n    {\n        key: '15',\n        groups: 'Right Tibialis Anterior',\n        abbreviations: 'RTA',\n    },\n    {\n        key: '16',\n        groups: 'Right Medial Gastrocnemius',\n        abbreviations: 'RMG',\n    },\n    {\n        key: '17',\n        groups: 'Right Upper Abdomen',\n        abbreviations: 'RUAB',\n    },\n    {\n        key: '18',\n        groups: 'Right Lower Abdomen',\n        abbreviations: 'RLAB',\n    },\n];\n\nconst MuscleTable = () => {\n    return (\n        <div>\n            <Table columns={columns} dataSource={data} className=\"muscles\"></Table> \n        </div>\n    )\n}\n\nexport default MuscleTable;\n*/\n","/app/src/js/reducers/baseReducer.js",[],"/app/src/js/components/clock/clock.js",[],{"ruleId":"89","severity":1,"message":"90","line":2,"column":8,"nodeType":"91","messageId":"92","endLine":2,"endColumn":21},{"ruleId":"89","severity":1,"message":"93","line":5,"column":18,"nodeType":"91","messageId":"92","endLine":5,"endColumn":22},{"ruleId":"94","severity":1,"message":"95","line":30,"column":6,"nodeType":"96","endLine":30,"endColumn":27,"suggestions":"97"},{"ruleId":"94","severity":1,"message":"98","line":38,"column":6,"nodeType":"96","endLine":38,"endColumn":46,"suggestions":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"89","severity":1,"message":"104","line":4,"column":8,"nodeType":"91","messageId":"92","endLine":4,"endColumn":21},{"ruleId":"89","severity":1,"message":"105","line":6,"column":10,"nodeType":"91","messageId":"92","endLine":6,"endColumn":20},{"ruleId":"89","severity":1,"message":"106","line":6,"column":22,"nodeType":"91","messageId":"92","endLine":6,"endColumn":34},{"ruleId":"89","severity":1,"message":"107","line":6,"column":36,"nodeType":"91","messageId":"92","endLine":6,"endColumn":53},{"ruleId":"89","severity":1,"message":"108","line":8,"column":8,"nodeType":"91","messageId":"92","endLine":8,"endColumn":20},{"ruleId":"89","severity":1,"message":"109","line":10,"column":8,"nodeType":"91","messageId":"92","endLine":10,"endColumn":13},{"ruleId":"89","severity":1,"message":"110","line":17,"column":7,"nodeType":"91","messageId":"92","endLine":17,"endColumn":10},{"ruleId":"89","severity":1,"message":"111","line":28,"column":14,"nodeType":"91","messageId":"92","endLine":28,"endColumn":21},{"ruleId":"89","severity":1,"message":"112","line":28,"column":23,"nodeType":"91","messageId":"92","endLine":28,"endColumn":28},{"ruleId":"89","severity":1,"message":"113","line":28,"column":30,"nodeType":"91","messageId":"92","endLine":28,"endColumn":44},{"ruleId":"89","severity":1,"message":"114","line":28,"column":46,"nodeType":"91","messageId":"92","endLine":28,"endColumn":60},{"ruleId":"115","severity":1,"message":"116","line":40,"column":18,"nodeType":"117","messageId":"118","endLine":40,"endColumn":20},{"ruleId":"119","severity":1,"message":"120","line":57,"column":56,"nodeType":"121","messageId":"122","endLine":57,"endColumn":57,"fix":"123"},{"ruleId":"89","severity":1,"message":"124","line":73,"column":11,"nodeType":"91","messageId":"92","endLine":73,"endColumn":25},{"ruleId":"119","severity":1,"message":"120","line":84,"column":52,"nodeType":"121","messageId":"122","endLine":84,"endColumn":53,"fix":"125"},{"ruleId":"119","severity":1,"message":"120","line":105,"column":60,"nodeType":"121","messageId":"122","endLine":105,"endColumn":61,"fix":"126"},{"ruleId":"94","severity":1,"message":"127","line":125,"column":8,"nodeType":"96","endLine":125,"endColumn":18,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":141,"column":17,"nodeType":"131","endLine":141,"endColumn":65},{"ruleId":"129","severity":1,"message":"130","line":153,"column":21,"nodeType":"131","endLine":153,"endColumn":39},{"ruleId":"129","severity":1,"message":"130","line":157,"column":21,"nodeType":"131","endLine":157,"endColumn":36},{"ruleId":"129","severity":1,"message":"130","line":167,"column":21,"nodeType":"131","endLine":167,"endColumn":36},{"ruleId":"129","severity":1,"message":"130","line":171,"column":21,"nodeType":"131","endLine":171,"endColumn":37},{"ruleId":"132","severity":1,"message":"133","line":23,"column":39,"nodeType":"121","messageId":"134","endLine":23,"endColumn":71,"fix":"135"},{"ruleId":"89","severity":1,"message":"136","line":1,"column":39,"nodeType":"91","messageId":"92","endLine":1,"endColumn":48},{"ruleId":"89","severity":1,"message":"137","line":1,"column":50,"nodeType":"91","messageId":"92","endLine":1,"endColumn":61},{"ruleId":"89","severity":1,"message":"138","line":3,"column":29,"nodeType":"91","messageId":"92","endLine":3,"endColumn":34},{"ruleId":"89","severity":1,"message":"139","line":3,"column":36,"nodeType":"91","messageId":"92","endLine":3,"endColumn":47},{"ruleId":"89","severity":1,"message":"140","line":3,"column":57,"nodeType":"91","messageId":"92","endLine":3,"endColumn":65},{"ruleId":"89","severity":1,"message":"141","line":3,"column":74,"nodeType":"91","messageId":"92","endLine":3,"endColumn":79},{"ruleId":"89","severity":1,"message":"142","line":8,"column":8,"nodeType":"91","messageId":"92","endLine":8,"endColumn":27},{"ruleId":"89","severity":1,"message":"143","line":59,"column":7,"nodeType":"91","messageId":"92","endLine":59,"endColumn":14},{"ruleId":"89","severity":1,"message":"144","line":72,"column":7,"nodeType":"91","messageId":"92","endLine":72,"endColumn":11},{"ruleId":"89","severity":1,"message":"111","line":186,"column":13,"nodeType":"91","messageId":"92","endLine":186,"endColumn":20},{"ruleId":"89","severity":1,"message":"112","line":186,"column":22,"nodeType":"91","messageId":"92","endLine":186,"endColumn":27},{"ruleId":"89","severity":1,"message":"113","line":186,"column":29,"nodeType":"91","messageId":"92","endLine":186,"endColumn":43},{"ruleId":"89","severity":1,"message":"145","line":186,"column":45,"nodeType":"91","messageId":"92","endLine":186,"endColumn":60},{"ruleId":"89","severity":1,"message":"146","line":186,"column":63,"nodeType":"91","messageId":"92","endLine":186,"endColumn":71},{"ruleId":"115","severity":1,"message":"116","line":226,"column":32,"nodeType":"117","messageId":"118","endLine":226,"endColumn":34},{"ruleId":"115","severity":1,"message":"116","line":228,"column":39,"nodeType":"117","messageId":"118","endLine":228,"endColumn":41},{"ruleId":"89","severity":1,"message":"147","line":235,"column":11,"nodeType":"91","messageId":"92","endLine":235,"endColumn":38},{"ruleId":"89","severity":1,"message":"148","line":2,"column":10,"nodeType":"91","messageId":"92","endLine":2,"endColumn":13},{"ruleId":"89","severity":1,"message":"149","line":2,"column":15,"nodeType":"91","messageId":"92","endLine":2,"endColumn":19},{"ruleId":"89","severity":1,"message":"150","line":2,"column":21,"nodeType":"91","messageId":"92","endLine":2,"endColumn":27},{"ruleId":"89","severity":1,"message":"138","line":2,"column":29,"nodeType":"91","messageId":"92","endLine":2,"endColumn":34},{"ruleId":"89","severity":1,"message":"139","line":2,"column":36,"nodeType":"91","messageId":"92","endLine":2,"endColumn":47},{"ruleId":"89","severity":1,"message":"151","line":2,"column":49,"nodeType":"91","messageId":"92","endLine":2,"endColumn":55},{"ruleId":"89","severity":1,"message":"140","line":2,"column":57,"nodeType":"91","messageId":"92","endLine":2,"endColumn":65},{"ruleId":"89","severity":1,"message":"152","line":2,"column":67,"nodeType":"91","messageId":"92","endLine":2,"endColumn":72},"no-unused-vars","'FormContainer' is defined but never used.","Identifier","unusedVar","'Menu' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has unnecessary dependencies: 'dispatch', 'env', and 'prev'. Either exclude them or remove the dependency array.","ArrayExpression",["153"],"React Hook useCallback has an unnecessary dependency: 'env'. Either exclude it or remove the dependency array.",["154"],"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"'FormInterface' is defined but never used.","'formAction' is defined but never used.","'startSpinner' is defined but never used.","'placeholderAction' is defined but never used.","'bluewhitered' is defined but never used.","'turbo' is defined but never used.","'b64' is assigned a value but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'server_message' is assigned a value but never used.","'image_complete' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"157","text":"158"},"'fetchImageData' is assigned a value but never used.",{"range":"159","text":"158"},{"range":"160","text":"161"},"React Hook useCallback has an unnecessary dependency: 'dispatch'. Either exclude it or remove the dependency array.",["162"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-whitespace-before-property","Unexpected whitespace before property shutterflyOpen.","unexpectedWhitespace",{"range":"163","text":"164"},"'useEffect' is defined but never used.","'useCallback' is defined but never used.","'Input' is defined but never used.","'InputNumber' is defined but never used.","'Checkbox' is defined but never used.","'Table' is defined but never used.","'muscleAbbreviations' is defined but never used.","'columns' is assigned a value but never used.","'data' is assigned a value but never used.","'submission_data' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'handleChangeContactSymmetry' is assigned a value but never used.","'Col' is defined but never used.","'Form' is defined but never used.","'Slider' is defined but never used.","'Button' is defined but never used.","'Radio' is defined but never used.",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},"no-global-assign","no-unsafe-negation",[2126,2140],"\n            .",[3382,3396],[12081,12099],"\n                .",{"desc":"165","fix":"169"},[758,760],".","Update the dependencies array to be: []",{"range":"170","text":"171"},"Update the dependencies array to be: [cherryUser, dispatch, departments]",{"range":"172","text":"173"},{"range":"174","text":"171"},[1019,1040],"[]",[1203,1243],"[cherryUser, dispatch, departments]",[12739,12749]]